?sd
std_error(rmse_test)
std_error(rmse_train)
# n-fold cross validation
my_cv = function(df, n_folds) {
# Make empty predictions vector
preds = numeric(nrow(df))
# Calculate the different folds
folds = sample(nrow(df)) %% n_folds + 1
for (i in 1:n_folds) {
# Get subsets of the data
df_train = df[folds != i, ]
df_test = df[folds == i, ]
# Fit linear model to training set
fit = lm(attr_o ~ ., df_train)
# Make predictions for other training set
preds[folds == i] = predict(fit, df_test)
}
# Return RMSE
sqrt(mean((preds - df$attr_o)^2))
}
# Run 100 trials for calculation of RMSE
set.seed(1)
rmse_2 = numeric(100)
rmse_10 = numeric(100)
for (i in 1:100) {
print(paste0("Iteration: ", as.character(i)))
rmse_2[i] = my_cv(df_attr, 2)
rmse_10[i] = my_cv(df_attr, 10)
}
# Plot values of RMSE
df_rmse = data.frame(rmse_2, rmse_10)
ggplot(df_rmse) + geom_histogram(aes(x=rmse_2), alpha=0.3, fill="red") + geom_histogram(aes(x=rmse_10), alpha=0.3, fill="blue")
mean(rmse_test)
mean(rmse_train)
mean(rmse_2)
mean(rmse_10)
std_error(rmse_2)
std_error(rmse_10)
backwardStep = function(df) {
rmseVec = c()
numFeaturesRemovedVec = c()
numFeaturesRemoved = 0
while (length(colnames(df)) > 1) {
# Calc RMSE
rSquared = nfold_cv(df, 10)
# Fit model
model = lm(attr_o ~.,df)
rmseVec = c(rmseVec, rSquared)
numFeaturesRemovedVec = c(numFeaturesRemovedVec, numFeaturesRemoved)
# Feature elimination
sumDF = as.data.frame(summary(model)$coefficients)
sumDF = cbind(sumDF, rownames(sumDF))
maxRow = filter(sumDF, sumDF[4] == max(sumDF[4]))
colIndex = match(maxRow[[5]], colnames(df))
# Eliminate column
df = select(df, -colIndex)
numFeaturesRemoved = numFeaturesRemoved + 1
# names(df)
}
return(data.frame(rmseVec, numFeaturesRemovedVec))
}
data = backwardStep(df_attr)
nfold_cv = function(df, n_folds) {
# Make empty predictions vector
preds = numeric(nrow(df))
# Calculate the different folds
folds = sample(nrow(df)) %% n_folds + 1
for (i in 1:n_folds) {
# Get subsets of the data
df_train = df[folds != i, ]
df_test = df[folds == i, ]
# Fit linear model to training set
fit = lm(attr_o ~ ., df_train)
# Make predictions for other training set
preds[folds == i] = predict(fit, df_test)
}
# Return RMSE
sqrt(mean((preds - df$attr_o)^2))
}
backwardStep = function(df) {
rmseVec = c()
numFeaturesRemovedVec = c()
numFeaturesRemoved = 0
while (length(colnames(df)) > 1) {
# Calc RMSE
rSquared = nfold_cv(df, 10)
# Fit model
model = lm(attr_o ~.,df)
rmseVec = c(rmseVec, rSquared)
numFeaturesRemovedVec = c(numFeaturesRemovedVec, numFeaturesRemoved)
# Feature elimination
sumDF = as.data.frame(summary(model)$coefficients)
sumDF = cbind(sumDF, rownames(sumDF))
maxRow = filter(sumDF, sumDF[4] == max(sumDF[4]))
colIndex = match(maxRow[[5]], colnames(df))
# Eliminate column
df = select(df, -colIndex)
numFeaturesRemoved = numFeaturesRemoved + 1
# names(df)
}
return(data.frame(rmseVec, numFeaturesRemovedVec))
}
data = backwardStep(df_attr)
data = backwardStep(df_attr)
data
step_results = backwardStep(df_attr)
traceback()
rm('summary')
step_results = backwardStep(df_attr)
backwardStep = function(df) {
rmseVec = c()
numFeaturesRemovedVec = c()
numFeaturesRemoved = 0
while (length(colnames(df)) > 1) {
print('a')
# Calc RMSE
rSquared = nfold_cv(df, 10)
# Fit model
model = lm(attr_o ~.,df)
rmseVec = c(rmseVec, rSquared)
numFeaturesRemovedVec = c(numFeaturesRemovedVec, numFeaturesRemoved)
# Feature elimination
sumDF = as.data.frame(summary(model)$coefficients)
sumDF = cbind(sumDF, rownames(sumDF))
maxRow = filter(sumDF, sumDF[4] == max(sumDF[4]))
colIndex = match(maxRow[[5]], colnames(df))
# Eliminate column
df = select(df, -colIndex)
numFeaturesRemoved = numFeaturesRemoved + 1
# names(df)
}
return(data.frame(rmseVec, numFeaturesRemovedVec))
}
step_results = backwardStep(df_attr)
backwardStep = function(df) {
rmseVec = c()
numFeaturesRemovedVec = c()
numFeaturesRemoved = 0
while (length(colnames(df)) > 1) {
print(colnameS(df))
# Calc RMSE
rSquared = nfold_cv(df, 10)
# Fit model
model = lm(attr_o ~.,df)
rmseVec = c(rmseVec, rSquared)
numFeaturesRemovedVec = c(numFeaturesRemovedVec, numFeaturesRemoved)
# Feature elimination
sumDF = as.data.frame(summary(model)$coefficients)
sumDF = cbind(sumDF, rownames(sumDF))
maxRow = filter(sumDF, sumDF[4] == max(sumDF[4]))
colIndex = match(maxRow[[5]], colnames(df))
# Eliminate column
df = select(df, -colIndex)
numFeaturesRemoved = numFeaturesRemoved + 1
# names(df)
}
return(data.frame(rmseVec, numFeaturesRemovedVec))
}
step_results = backwardStep(df_attr)
backwardStep = function(df) {
rmseVec = c()
numFeaturesRemovedVec = c()
numFeaturesRemoved = 0
while (length(colnames(df)) > 1) {
print(colnames(df))
# Calc RMSE
rSquared = nfold_cv(df, 10)
# Fit model
model = lm(attr_o ~.,df)
rmseVec = c(rmseVec, rSquared)
numFeaturesRemovedVec = c(numFeaturesRemovedVec, numFeaturesRemoved)
# Feature elimination
sumDF = as.data.frame(summary(model)$coefficients)
sumDF = cbind(sumDF, rownames(sumDF))
maxRow = filter(sumDF, sumDF[4] == max(sumDF[4]))
colIndex = match(maxRow[[5]], colnames(df))
# Eliminate column
df = select(df, -colIndex)
numFeaturesRemoved = numFeaturesRemoved + 1
# names(df)
}
return(data.frame(rmseVec, numFeaturesRemovedVec))
}
step_results = backwardStep(df_attr)
backwardStep = function(df) {
rmseVec = c()
numFeaturesRemovedVec = c()
numFeaturesRemoved = 0
while (length(colnames(df)) > 1) {
print(colnames(df))
# Calc RMSE
rSquared = nfold_cv(df, 10)
# Fit model
model = lm(attr_o ~.,df)
rmseVec = c(rmseVec, rSquared)
numFeaturesRemovedVec = c(numFeaturesRemovedVec, numFeaturesRemoved)
# Feature elimination
sumDF = as.data.frame(summary(model)$coefficients)
sumDF = cbind(sumDF, rownames(sumDF))
maxRow = filter(sumDF, sumDF[4] == max(sumDF[4]))
colIndex = match(maxRow[[5]], colnames(df))
# Eliminate column
df = select(df, -colIndex)
numFeaturesRemoved = numFeaturesRemoved + 1
# names(df)
}
return(data.frame(rmseVec, numFeaturesRemovedVec))
}
step_results = backwardStep(df_attr)
backwardStep = function(df) {
rmseVec = c()
numFeaturesRemovedVec = c()
numFeaturesRemoved = 0
while (length(colnames(df)) > 1) {
print(colnames(df))
# Calc RMSE
rSquared = nfold_cv(df, 10)
# Fit model
model = lm(attr_o ~.,df)
rmseVec = c(rmseVec, rSquared)
numFeaturesRemovedVec = c(numFeaturesRemovedVec, numFeaturesRemoved)
# Feature elimination
sumDF = as.data.frame(summary(model)$coefficients)
sumDF = cbind(sumDF, rownames(sumDF))
maxRow = filter(sumDF, sumDF[4] == max(sumDF[4]))
colIndex = match(maxRow[[5]], colnames(df))
# Eliminate column
df = df[, -colIndex]
numFeaturesRemoved = numFeaturesRemoved + 1
# names(df)
}
return(data.frame(rmseVec, numFeaturesRemovedVec))
}
step_results = backwardStep(df_attr)
backwardStep = function(df) {
rmseVec = c()
numFeaturesRemovedVec = c()
numFeaturesRemoved = 0
while (length(colnames(df)) > 1) {
print(colnames(df))
# Calc RMSE
rSquared = nfold_cv(df, 10)
# Fit model
model = lm(attr_o ~.,df)
rmseVec = c(rmseVec, rSquared)
numFeaturesRemovedVec = c(numFeaturesRemovedVec, numFeaturesRemoved)
# Feature elimination
sumDF = as.data.frame(summary(model)$coefficients)
sumDF = cbind(sumDF, rownames(sumDF))
maxRow = filter(sumDF, sumDF[4] == max(sumDF[4]))
colIndex = match(maxRow[[5]], colnames(df))
# Eliminate column
print(colIndex)
df = df[, -colIndex]
numFeaturesRemoved = numFeaturesRemoved + 1
# names(df)
}
return(data.frame(rmseVec, numFeaturesRemovedVec))
}
step_results = backwardStep(df_attr)
m = lm(attr_o~.,df)
m
summary(m)
m$coefficients
summary(m)$coefficients
s = summary(m)$coefficients
s = as.data.frame(s)
s = cbind(s, rownames(s))
s
s[4]
maxrow = filter(s, s[4] == max(s[4]))
maxrow
maxrow[[5]]
backwardStep = function(df) {
rmseVec = c()
numFeaturesRemovedVec = c()
numFeaturesRemoved = 0
while (length(colnames(df)) > 1) {
# Fit model
model = lm(attr_o ~.,df)
rmseVec = c(rmseVec, nfold_cv(df, 10))
numFeaturesRemovedVec = c(numFeaturesRemovedVec, numFeaturesRemoved)
# Feature elimination
sumDF = as.data.frame(summary(model)$coefficients)
sumDF = cbind(sumDF, rownames(sumDF))
maxRow = filter(sumDF, sumDF[4] == max(sumDF[4]))
# Eliminate column
df = select(df, -one_of(maxRow[[5]]))
numFeaturesRemoved = numFeaturesRemoved + 1
# names(df)
}
return(data.frame(rmseVec, numFeaturesRemovedVec))
}
step_results = backwardStep(df_attr)
backwardStep = function(df) {
rmseVec = c()
numFeaturesRemovedVec = c()
numFeaturesRemoved = 0
while (length(colnames(df)) > 1) {
# Fit model
model = lm(attr_o ~.,df)
rmseVec = c(rmseVec, nfold_cv(df, 10))
numFeaturesRemovedVec = c(numFeaturesRemovedVec, numFeaturesRemoved)
# Feature elimination
sumDF = as.data.frame(summary(model)$coefficients)
sumDF = cbind(sumDF, rownames(sumDF))
maxRow = filter(sumDF, sumDF[4] == max(sumDF[4]))
# Eliminate column
print(maxRow[[5]])
df = select(df, -one_of(maxRow[[5]]))
numFeaturesRemoved = numFeaturesRemoved + 1
# names(df)
}
return(data.frame(rmseVec, numFeaturesRemovedVec))
}
step_results = backwardStep(df_attr)
backwardStep = function(df) {
rmseVec = c()
numFeaturesRemovedVec = c()
numFeaturesRemoved = 0
while (length(colnames(df)) > 1) {
# Fit model
model = lm(attr_o ~.,df)
rmseVec = c(rmseVec, nfold_cv(df, 10))
numFeaturesRemovedVec = c(numFeaturesRemovedVec, numFeaturesRemoved)
# Feature elimination
sumDF = as.data.frame(summary(model)$coefficients)
sumDF = cbind(sumDF, rownames(sumDF))
maxRow = filter(sumDF, sumDF[4] == max(sumDF[4]))
# Eliminate column
print(maxRow[[5]])
df = select(df, -one_of(as.character(maxRow[[5]])))
numFeaturesRemoved = numFeaturesRemoved + 1
# names(df)
}
return(data.frame(rmseVec, numFeaturesRemovedVec))
}
step_results = backwardStep(df_attr)
m
maxrow
s
backwardStep = function(df) {
rmseVec = c()
numFeaturesRemovedVec = c()
numFeaturesRemoved = 0
while (length(colnames(df)) > 1) {
# Fit model
model = lm(attr_o ~.,df)
rmseVec = c(rmseVec, nfold_cv(df, 10))
numFeaturesRemovedVec = c(numFeaturesRemovedVec, numFeaturesRemoved)
# Feature elimination
sumDF = as.data.frame(summary(model)$coefficients)
sumDF = cbind(sumDF, rownames(sumDF))
sumDF = sumDF[-1, ] # remove Intercept column
maxRow = filter(sumDF, sumDF[4] == max(sumDF[4]))
# Eliminate column
print(maxRow[[5]])
df = select(df, -one_of(as.character(maxRow[[5]])))
numFeaturesRemoved = numFeaturesRemoved + 1
# names(df)
}
return(data.frame(rmseVec, numFeaturesRemovedVec))
}
step_results = backwardStep(df_attr)
plot(step_results$numFeaturesRemovedVec, step_results$rmseVec)
backStepOfficial = function(df) {
responseVars = c("attr_o", "sinc_o","intel_o","fun_o","amb_o")
finalModels = list()
for(i in responseVars){
activities = select(df, one_of(i), sports:yoga)
f = paste(i,"~.")
model = lm(f, activities)
s = step(model, formula(model), direction="backward")
finalModels[length(finalModels)+1] = s
}
return(finalModels)
}
tmp = backStepOfficial(df_attr)
backStepOfficial = function(df) {
responseVars = c("attr_o", "sinc_o","intel_o","fun_o","amb_o")
finalModels = list()
for(i in responseVars){
activities = select(df, one_of(i), sports:yoga)
f = paste(i,"~.")
model = lm(f, activities)
s = step(model, formula(model), direction="backward")
finalModels[[length(finalModels)+1]] = s
}
return(finalModels)
}
tmp = backStepOfficial(df_attr)
tmp
real_step_models = backStepOfficial(df_attr)
real_step_models
df_attr
names(df_attr)
df = read.csv('speed-dating-simple.csv')
df_attr = select(df, -intel_o, -amb_o, -fun_o, -sinc_o)
df_attr = filter(df, gender==0)
df_attr = select(df, -gender)
df_attr
names(df_attr)
df_attr = select(df, -intel_o, -amb_o, -fun_o, -sinc_o)
df_attr = filter(df_attr, gender==0)
df_attr = select(df_attr, -gender)
niter = 100
rmse_train = rep(0, niter)
rmse_test = rep(0, niter)
for (i in 1:niter) {
print(paste('Iteration:', i))
splits = split_data(df_attr)
preds = split_predict(splits$train, splits$test)
rmse_train[i] = rmse(preds$train, splits$train$attr_o)
rmse_test[i] = rmse(preds$test, splits$test$attr_o)
}
rmses = data.frame(rmse_train, rmse_test)
ggplot(rmses) + geom_histogram(aes(rmse_train), fill="blue", alpha=0.2) + geom_histogram(aes(rmse_test), fill="red", alpha=0.2)
real_step_models = backStepOfficial(df)
real_step_models
step_f = backStepOfficial(filter(df, gender==0))
step_m = backStepOfficial(filter(df, gender==1))
step_m
step_f
for (i in 1:10000) {
res_mr = miller_rabin(i)
res_simp = simple_check(i)
if (res_mr != res_simp) {
print(i)
break
}
}
for (i in 10000:100000) {
res_mr = miller_rabin(i)
res_simp = simple_check(i)
if (res_mr != res_simp) {
print(i)
break
}
}
for (i in 100000:1000000) {
res_mr = miller_rabin(i)
res_simp = simple_check(i)
if (res_mr != res_simp) {
print(i)
break
}
}
Reduce('|', c(TRUE, FALSE, TRUE))
df = data.frame(matrix(1:100, nrow=10)); df[1:5] = lapply(df[1:5], as.character)
df
standardize = function(df) as.data.frame(lapply(df, function(c) ifelse(is.numeric(c), (c-mean(c))/sd(c), c)))
standardize(df)
lapply(df, function(c) ifelse(is.numeric(c), (c-mean(c))/df(c), c))
lapply(df, function(c) ifelse(is.numeric(c), (c-mean(c))/sd(c), c))
df
lapply(df, function(c) c)
as.data.frame(lapply(df, function(c) c))
as.data.frame(lapply(df, function(c) ifelse(is.numeric(c), c, c)))
lapply(df, function(c) ifelse(is.numeric(c), c, c))
lapply(c, function(c) c)
lapply(df, function(c) c)
lapply(df, function(c) ifelse(is.numeric(c), c, c))
sapply(df, function(c) ifelse(is.numeric(c), c, c)))
sapply(df, function(c) ifelse(is.numeric(c), c, c))
lapply(df, function(c) ifelse(is.numeric(c), c, c))
df_standardize = function(df) data.frame(lapply(df, function(x) (x-mean(x))/sd(x)))
df_standardize(df)
df_standardize_numeric(df)
df_standardize_numeric = function(df) data.frame(lapply(df, function(x) ifelse(is.numeric(x), (x-mean(x))/sd(x), x)))
df_standardize_numeric(df)
df = data.frame(matrix(1:100, nrow=10))
df[1:5] = lapply(df[1:5], as.character)
df_standardize_numeric(df)
df
?ifelse
x = 1:10
ifelse(is.numeric(x), 1, 0)
ifelse(is.numeric(x), 1:10, 2:11)
is.numeric(x)
ifelse(sapply(is.numeric, x)
, 1:10, 2:11)
x
ifelse(sapply(x, is.numeric), 1:10, 2:11)
df_standardize_numeric = function(df) data.frame(lapply(df, function(x) ifelse(sapply(x, is.numeric), (x-mean(x))/sd(x), x)))
df = data.frame(matrix(1:100, nrow=10))
df[1:5] = lapply(df[1:5], as.character)
df_standardize_numeric(df)
setwd("~/Signal/curriculum/assignments/1-r-programming/4-spellcheck")
setwd('C:/Users/Andrew/Documents/Signal/curriculum/assignments/1-r-curriculum/4-spellcheck/')
setwd('C:/Users/Andrew/Documents/Signal/curriculum/assignments/1-r-programming/4-spellcheck/')
grep("[:alnum:]+", c('a'))
grep("[:alnum:]+", c('a', 'b', '$'))
grep("[:alnum:]+", c('a', 'b', '$'))
?grep
grep("[:alnum:]+", c('a', 'bh', '$'))
grep("[:alnum:]+", c('a', 'a', '$'))
grep("[:alpha:]+", c('a', 'a', '$'))
grep("[:alpha:]+", c('a', 'b', '$'))
grep("[:alpha:]*", c('a', 'b', '$'))
grep("[:alpha:]+", c('a', 'b', '$'))
grep("[:alpha:]+", c('a', 'e', '$'))
grep("[:alpha:]+", c('b', 'a', '$'))
2L / 3L
Y_sim = seq(0, 1, length.out=n_bins)
X_sim = (Y_sim - 1) / log(Y_sim)
bin_width = 0.01
n_bins = 1/bin_width
Y_sim = seq(0, 1, length.out=n_bins)
X_sim = (Y_sim - 1) / log(Y_sim)
qplot(Y_sim, X_sim)
?table
